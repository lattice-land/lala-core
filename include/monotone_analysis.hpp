// Copyright 2022 Pierre Talbot
// This file is generated automatically by the script `lala-core/gen/gen_op_table.py`

template<typename L, typename = void> struct neg_z {};
template<class V> struct neg_z<spos<V>> { using type = sneg<V>; };
template<class V> struct neg_z<sneg<V>> { using type = spos<V>; };
template<class V> struct neg_z<ZPInc<V>> { using type = ZNDec<V>; };
template<class V> struct neg_z<ZNInc<V>> { using type = ZPDec<V>; };
template<class V> struct neg_z<ZPDec<V>> { using type = ZNInc<V>; };
template<class V> struct neg_z<ZNDec<V>> { using type = ZPInc<V>; };
template<class V> struct neg_z<V, std::enable_if_t<std::is_arithmetic_v<V>>> { using type = V; };
template<class V> struct neg_z<ZInc<V>> { using type = ZDec<V>; };
template<class V> struct neg_z<ZDec<V>> { using type = ZInc<V>; };

template<typename L, typename = void> struct abs_z {};
template<class V> struct abs_z<spos<V>> { using type = spos<V>; };
template<class V> struct abs_z<sneg<V>> { using type = spos<V>; };
template<class V> struct abs_z<ZPInc<V>> { using type = ZPInc<V>; };
template<class V> struct abs_z<ZNInc<V>> { using type = ZPDec<V>; };
template<class V> struct abs_z<ZPDec<V>> { using type = ZPDec<V>; };
template<class V> struct abs_z<ZNDec<V>> { using type = ZPInc<V>; };
template<class V> struct abs_z<V, std::enable_if_t<std::is_arithmetic_v<V>>> { using type = V; };

template<typename L, typename K> struct add_z {};
template<class V> struct add_z<spos<V>, spos<V>> { using type = spos<V>; };
template<class V> struct add_z<spos<V>, sneg<V>> { using type = V; };
template<class V> struct add_z<spos<V>, ZPInc<V>> { using type = ZPInc<V>; };
template<class V> struct add_z<spos<V>, ZNInc<V>> { using type = ZInc<V>; };
template<class V> struct add_z<spos<V>, ZPDec<V>> { using type = ZPDec<V>; };
template<class V> struct add_z<spos<V>, ZNDec<V>> { using type = ZDec<V>; };
template<class V> struct add_z<sneg<V>, spos<V>> { using type = V; };
template<class V> struct add_z<sneg<V>, sneg<V>> { using type = sneg<V>; };
template<class V> struct add_z<sneg<V>, ZPInc<V>> { using type = ZInc<V>; };
template<class V> struct add_z<sneg<V>, ZNInc<V>> { using type = ZNInc<V>; };
template<class V> struct add_z<sneg<V>, ZPDec<V>> { using type = ZDec<V>; };
template<class V> struct add_z<sneg<V>, ZNDec<V>> { using type = ZNDec<V>; };
template<class V> struct add_z<ZPInc<V>, spos<V>> { using type = ZPInc<V>; };
template<class V> struct add_z<ZPInc<V>, sneg<V>> { using type = ZInc<V>; };
template<class V> struct add_z<ZPInc<V>, ZPInc<V>> { using type = ZPInc<V>; };
template<class V> struct add_z<ZPInc<V>, ZNInc<V>> { using type = ZInc<V>; };
template<class V> struct add_z<ZNInc<V>, spos<V>> { using type = ZInc<V>; };
template<class V> struct add_z<ZNInc<V>, sneg<V>> { using type = ZNInc<V>; };
template<class V> struct add_z<ZNInc<V>, ZPInc<V>> { using type = ZInc<V>; };
template<class V> struct add_z<ZNInc<V>, ZNInc<V>> { using type = ZNInc<V>; };
template<class V> struct add_z<ZPDec<V>, spos<V>> { using type = ZPDec<V>; };
template<class V> struct add_z<ZPDec<V>, sneg<V>> { using type = ZDec<V>; };
template<class V> struct add_z<ZPDec<V>, ZPDec<V>> { using type = ZPDec<V>; };
template<class V> struct add_z<ZPDec<V>, ZNDec<V>> { using type = ZDec<V>; };
template<class V> struct add_z<ZNDec<V>, spos<V>> { using type = ZDec<V>; };
template<class V> struct add_z<ZNDec<V>, sneg<V>> { using type = ZNDec<V>; };
template<class V> struct add_z<ZNDec<V>, ZPDec<V>> { using type = ZDec<V>; };
template<class V> struct add_z<ZNDec<V>, ZNDec<V>> { using type = ZNDec<V>; };
template<class V> struct add_z<spos<V>, V> { using type = V; };
template<class V> struct add_z<sneg<V>, V> { using type = V; };
template<class V> struct add_z<V, spos<V>> { using type = V; };
template<class V> struct add_z<V, sneg<V>> { using type = V; };
template<class V> struct add_z<V, V> { using type = V; };
template<class V> struct add_z<spos<V>, ZInc<V>> { using type = ZInc<V>; };
template<class V> struct add_z<sneg<V>, ZInc<V>> { using type = ZInc<V>; };
template<class V> struct add_z<V, ZPInc<V>> { using type = ZInc<V>; };
template<class V> struct add_z<V, ZNInc<V>> { using type = ZInc<V>; };
template<class V> struct add_z<V, ZInc<V>> { using type = ZInc<V>; };
template<class V> struct add_z<spos<V>, ZDec<V>> { using type = ZDec<V>; };
template<class V> struct add_z<sneg<V>, ZDec<V>> { using type = ZDec<V>; };
template<class V> struct add_z<V, ZPDec<V>> { using type = ZDec<V>; };
template<class V> struct add_z<V, ZNDec<V>> { using type = ZDec<V>; };
template<class V> struct add_z<V, ZDec<V>> { using type = ZDec<V>; };
template<class V> struct add_z<ZPInc<V>, V> { using type = ZInc<V>; };
template<class V> struct add_z<ZNInc<V>, V> { using type = ZInc<V>; };
template<class V> struct add_z<ZInc<V>, spos<V>> { using type = ZInc<V>; };
template<class V> struct add_z<ZInc<V>, sneg<V>> { using type = ZInc<V>; };
template<class V> struct add_z<ZInc<V>, V> { using type = ZInc<V>; };
template<class V> struct add_z<ZPInc<V>, ZInc<V>> { using type = ZInc<V>; };
template<class V> struct add_z<ZNInc<V>, ZInc<V>> { using type = ZInc<V>; };
template<class V> struct add_z<ZInc<V>, ZPInc<V>> { using type = ZInc<V>; };
template<class V> struct add_z<ZInc<V>, ZNInc<V>> { using type = ZInc<V>; };
template<class V> struct add_z<ZInc<V>, ZInc<V>> { using type = ZInc<V>; };
template<class V> struct add_z<ZPDec<V>, V> { using type = ZDec<V>; };
template<class V> struct add_z<ZNDec<V>, V> { using type = ZDec<V>; };
template<class V> struct add_z<ZDec<V>, spos<V>> { using type = ZDec<V>; };
template<class V> struct add_z<ZDec<V>, sneg<V>> { using type = ZDec<V>; };
template<class V> struct add_z<ZDec<V>, V> { using type = ZDec<V>; };
template<class V> struct add_z<ZPDec<V>, ZDec<V>> { using type = ZDec<V>; };
template<class V> struct add_z<ZNDec<V>, ZDec<V>> { using type = ZDec<V>; };
template<class V> struct add_z<ZDec<V>, ZPDec<V>> { using type = ZDec<V>; };
template<class V> struct add_z<ZDec<V>, ZNDec<V>> { using type = ZDec<V>; };
template<class V> struct add_z<ZDec<V>, ZDec<V>> { using type = ZDec<V>; };

template<typename L, typename K> struct sub_z {};
template<class V> struct sub_z<spos<V>, spos<V>> { using type = V; };
template<class V> struct sub_z<spos<V>, sneg<V>> { using type = spos<V>; };
template<class V> struct sub_z<spos<V>, ZPInc<V>> { using type = ZDec<V>; };
template<class V> struct sub_z<spos<V>, ZNInc<V>> { using type = ZPDec<V>; };
template<class V> struct sub_z<spos<V>, ZPDec<V>> { using type = ZInc<V>; };
template<class V> struct sub_z<spos<V>, ZNDec<V>> { using type = ZPInc<V>; };
template<class V> struct sub_z<sneg<V>, spos<V>> { using type = sneg<V>; };
template<class V> struct sub_z<sneg<V>, sneg<V>> { using type = V; };
template<class V> struct sub_z<sneg<V>, ZPInc<V>> { using type = ZNDec<V>; };
template<class V> struct sub_z<sneg<V>, ZNInc<V>> { using type = ZDec<V>; };
template<class V> struct sub_z<sneg<V>, ZPDec<V>> { using type = ZNInc<V>; };
template<class V> struct sub_z<sneg<V>, ZNDec<V>> { using type = ZInc<V>; };
template<class V> struct sub_z<ZPInc<V>, spos<V>> { using type = ZInc<V>; };
template<class V> struct sub_z<ZPInc<V>, sneg<V>> { using type = ZPInc<V>; };
template<class V> struct sub_z<ZPInc<V>, ZPDec<V>> { using type = ZInc<V>; };
template<class V> struct sub_z<ZPInc<V>, ZNDec<V>> { using type = ZPInc<V>; };
template<class V> struct sub_z<ZNInc<V>, spos<V>> { using type = ZNInc<V>; };
template<class V> struct sub_z<ZNInc<V>, sneg<V>> { using type = ZInc<V>; };
template<class V> struct sub_z<ZNInc<V>, ZPDec<V>> { using type = ZNInc<V>; };
template<class V> struct sub_z<ZNInc<V>, ZNDec<V>> { using type = ZInc<V>; };
template<class V> struct sub_z<ZPDec<V>, spos<V>> { using type = ZDec<V>; };
template<class V> struct sub_z<ZPDec<V>, sneg<V>> { using type = ZPDec<V>; };
template<class V> struct sub_z<ZPDec<V>, ZPInc<V>> { using type = ZDec<V>; };
template<class V> struct sub_z<ZPDec<V>, ZNInc<V>> { using type = ZPDec<V>; };
template<class V> struct sub_z<ZNDec<V>, spos<V>> { using type = ZNDec<V>; };
template<class V> struct sub_z<ZNDec<V>, sneg<V>> { using type = ZDec<V>; };
template<class V> struct sub_z<ZNDec<V>, ZPInc<V>> { using type = ZNDec<V>; };
template<class V> struct sub_z<ZNDec<V>, ZNInc<V>> { using type = ZDec<V>; };
template<class V> struct sub_z<spos<V>, V> { using type = V; };
template<class V> struct sub_z<sneg<V>, V> { using type = V; };
template<class V> struct sub_z<V, spos<V>> { using type = V; };
template<class V> struct sub_z<V, sneg<V>> { using type = V; };
template<class V> struct sub_z<V, V> { using type = V; };
template<class V> struct sub_z<spos<V>, ZInc<V>> { using type = ZDec<V>; };
template<class V> struct sub_z<sneg<V>, ZInc<V>> { using type = ZDec<V>; };
template<class V> struct sub_z<V, ZPInc<V>> { using type = ZDec<V>; };
template<class V> struct sub_z<V, ZNInc<V>> { using type = ZDec<V>; };
template<class V> struct sub_z<V, ZInc<V>> { using type = ZDec<V>; };
template<class V> struct sub_z<spos<V>, ZDec<V>> { using type = ZInc<V>; };
template<class V> struct sub_z<sneg<V>, ZDec<V>> { using type = ZInc<V>; };
template<class V> struct sub_z<V, ZPDec<V>> { using type = ZInc<V>; };
template<class V> struct sub_z<V, ZNDec<V>> { using type = ZInc<V>; };
template<class V> struct sub_z<V, ZDec<V>> { using type = ZInc<V>; };
template<class V> struct sub_z<ZPInc<V>, V> { using type = ZInc<V>; };
template<class V> struct sub_z<ZNInc<V>, V> { using type = ZInc<V>; };
template<class V> struct sub_z<ZInc<V>, spos<V>> { using type = ZInc<V>; };
template<class V> struct sub_z<ZInc<V>, sneg<V>> { using type = ZInc<V>; };
template<class V> struct sub_z<ZInc<V>, V> { using type = ZInc<V>; };
template<class V> struct sub_z<ZPInc<V>, ZDec<V>> { using type = ZInc<V>; };
template<class V> struct sub_z<ZNInc<V>, ZDec<V>> { using type = ZInc<V>; };
template<class V> struct sub_z<ZInc<V>, ZPDec<V>> { using type = ZInc<V>; };
template<class V> struct sub_z<ZInc<V>, ZNDec<V>> { using type = ZInc<V>; };
template<class V> struct sub_z<ZInc<V>, ZDec<V>> { using type = ZInc<V>; };
template<class V> struct sub_z<ZPDec<V>, V> { using type = ZDec<V>; };
template<class V> struct sub_z<ZNDec<V>, V> { using type = ZDec<V>; };
template<class V> struct sub_z<ZDec<V>, spos<V>> { using type = ZDec<V>; };
template<class V> struct sub_z<ZDec<V>, sneg<V>> { using type = ZDec<V>; };
template<class V> struct sub_z<ZDec<V>, V> { using type = ZDec<V>; };
template<class V> struct sub_z<ZPDec<V>, ZInc<V>> { using type = ZDec<V>; };
template<class V> struct sub_z<ZNDec<V>, ZInc<V>> { using type = ZDec<V>; };
template<class V> struct sub_z<ZDec<V>, ZPInc<V>> { using type = ZDec<V>; };
template<class V> struct sub_z<ZDec<V>, ZNInc<V>> { using type = ZDec<V>; };
template<class V> struct sub_z<ZDec<V>, ZInc<V>> { using type = ZDec<V>; };

template<typename L, typename K> struct mul_z {};
template<class V> struct mul_z<spos<V>, spos<V>> { using type = spos<V>; };
template<class V> struct mul_z<spos<V>, sneg<V>> { using type = sneg<V>; };
template<class V> struct mul_z<spos<V>, ZPInc<V>> { using type = ZPInc<V>; };
template<class V> struct mul_z<spos<V>, ZNInc<V>> { using type = ZNInc<V>; };
template<class V> struct mul_z<spos<V>, ZPDec<V>> { using type = ZPDec<V>; };
template<class V> struct mul_z<spos<V>, ZNDec<V>> { using type = ZNDec<V>; };
template<class V> struct mul_z<sneg<V>, spos<V>> { using type = sneg<V>; };
template<class V> struct mul_z<sneg<V>, sneg<V>> { using type = spos<V>; };
template<class V> struct mul_z<sneg<V>, ZPInc<V>> { using type = ZNDec<V>; };
template<class V> struct mul_z<sneg<V>, ZNInc<V>> { using type = ZPDec<V>; };
template<class V> struct mul_z<sneg<V>, ZPDec<V>> { using type = ZNInc<V>; };
template<class V> struct mul_z<sneg<V>, ZNDec<V>> { using type = ZPInc<V>; };
template<class V> struct mul_z<ZPInc<V>, spos<V>> { using type = ZPInc<V>; };
template<class V> struct mul_z<ZPInc<V>, sneg<V>> { using type = ZNDec<V>; };
template<class V> struct mul_z<ZPInc<V>, ZPInc<V>> { using type = ZPInc<V>; };
template<class V> struct mul_z<ZPInc<V>, ZNDec<V>> { using type = ZNDec<V>; };
template<class V> struct mul_z<ZNInc<V>, spos<V>> { using type = ZNInc<V>; };
template<class V> struct mul_z<ZNInc<V>, sneg<V>> { using type = ZPDec<V>; };
template<class V> struct mul_z<ZNInc<V>, ZNInc<V>> { using type = ZPDec<V>; };
template<class V> struct mul_z<ZNInc<V>, ZPDec<V>> { using type = ZNInc<V>; };
template<class V> struct mul_z<ZPDec<V>, spos<V>> { using type = ZPDec<V>; };
template<class V> struct mul_z<ZPDec<V>, sneg<V>> { using type = ZNInc<V>; };
template<class V> struct mul_z<ZPDec<V>, ZNInc<V>> { using type = ZNInc<V>; };
template<class V> struct mul_z<ZPDec<V>, ZPDec<V>> { using type = ZPDec<V>; };
template<class V> struct mul_z<ZNDec<V>, spos<V>> { using type = ZNDec<V>; };
template<class V> struct mul_z<ZNDec<V>, sneg<V>> { using type = ZPInc<V>; };
template<class V> struct mul_z<ZNDec<V>, ZPInc<V>> { using type = ZNDec<V>; };
template<class V> struct mul_z<ZNDec<V>, ZNDec<V>> { using type = ZPInc<V>; };
template<class V> struct mul_z<spos<V>, V> { using type = V; };
template<class V> struct mul_z<sneg<V>, V> { using type = V; };
template<class V> struct mul_z<V, spos<V>> { using type = V; };
template<class V> struct mul_z<V, sneg<V>> { using type = V; };
template<class V> struct mul_z<V, V> { using type = V; };
template<class V> struct mul_z<spos<V>, ZInc<V>> { using type = ZInc<V>; };
template<class V> struct mul_z<sneg<V>, ZInc<V>> { using type = ZDec<V>; };
template<class V> struct mul_z<spos<V>, ZDec<V>> { using type = ZDec<V>; };
template<class V> struct mul_z<sneg<V>, ZDec<V>> { using type = ZInc<V>; };
template<class V> struct mul_z<ZInc<V>, spos<V>> { using type = ZInc<V>; };
template<class V> struct mul_z<ZInc<V>, sneg<V>> { using type = ZDec<V>; };
template<class V> struct mul_z<ZDec<V>, spos<V>> { using type = ZDec<V>; };
template<class V> struct mul_z<ZDec<V>, sneg<V>> { using type = ZInc<V>; };

template<typename L, typename K> struct div_z {};
template<class V> struct div_z<spos<V>, spos<V>> { using type = spos<V>; };
template<class V> struct div_z<spos<V>, sneg<V>> { using type = sneg<V>; };
template<class V> struct div_z<spos<V>, ZPInc<V>> { using type = ZPDec<V>; };
template<class V> struct div_z<spos<V>, ZNInc<V>> { using type = ZNDec<V>; };
template<class V> struct div_z<spos<V>, ZPDec<V>> { using type = ZPInc<V>; };
template<class V> struct div_z<spos<V>, ZNDec<V>> { using type = ZNInc<V>; };
template<class V> struct div_z<sneg<V>, spos<V>> { using type = sneg<V>; };
template<class V> struct div_z<sneg<V>, sneg<V>> { using type = spos<V>; };
template<class V> struct div_z<sneg<V>, ZPInc<V>> { using type = ZNInc<V>; };
template<class V> struct div_z<sneg<V>, ZNInc<V>> { using type = ZPInc<V>; };
template<class V> struct div_z<sneg<V>, ZPDec<V>> { using type = ZNDec<V>; };
template<class V> struct div_z<sneg<V>, ZNDec<V>> { using type = ZPDec<V>; };
template<class V> struct div_z<ZPInc<V>, spos<V>> { using type = ZPInc<V>; };
template<class V> struct div_z<ZPInc<V>, sneg<V>> { using type = ZNDec<V>; };
template<class V> struct div_z<ZPInc<V>, ZNInc<V>> { using type = ZNDec<V>; };
template<class V> struct div_z<ZPInc<V>, ZPDec<V>> { using type = ZPInc<V>; };
template<class V> struct div_z<ZNInc<V>, spos<V>> { using type = ZNInc<V>; };
template<class V> struct div_z<ZNInc<V>, sneg<V>> { using type = ZPDec<V>; };
template<class V> struct div_z<ZNInc<V>, ZPInc<V>> { using type = ZNInc<V>; };
template<class V> struct div_z<ZNInc<V>, ZNDec<V>> { using type = ZPDec<V>; };
template<class V> struct div_z<ZPDec<V>, spos<V>> { using type = ZPDec<V>; };
template<class V> struct div_z<ZPDec<V>, sneg<V>> { using type = ZNInc<V>; };
template<class V> struct div_z<ZPDec<V>, ZPInc<V>> { using type = ZPDec<V>; };
template<class V> struct div_z<ZPDec<V>, ZNDec<V>> { using type = ZNInc<V>; };
template<class V> struct div_z<ZNDec<V>, spos<V>> { using type = ZNDec<V>; };
template<class V> struct div_z<ZNDec<V>, sneg<V>> { using type = ZPInc<V>; };
template<class V> struct div_z<ZNDec<V>, ZNInc<V>> { using type = ZPInc<V>; };
template<class V> struct div_z<ZNDec<V>, ZPDec<V>> { using type = ZNDec<V>; };
template<class V> struct div_z<spos<V>, V> { using type = V; };
template<class V> struct div_z<sneg<V>, V> { using type = V; };
template<class V> struct div_z<V, spos<V>> { using type = V; };
template<class V> struct div_z<V, sneg<V>> { using type = V; };
template<class V> struct div_z<V, V> { using type = V; };
template<class V> struct div_z<spos<V>, ZInc<V>> { using type = ZDec<V>; };
template<class V> struct div_z<sneg<V>, ZInc<V>> { using type = ZInc<V>; };
template<class V> struct div_z<spos<V>, ZDec<V>> { using type = ZInc<V>; };
template<class V> struct div_z<sneg<V>, ZDec<V>> { using type = ZDec<V>; };
template<class V> struct div_z<ZInc<V>, spos<V>> { using type = ZInc<V>; };
template<class V> struct div_z<ZInc<V>, sneg<V>> { using type = ZDec<V>; };
template<class V> struct div_z<ZDec<V>, spos<V>> { using type = ZDec<V>; };
template<class V> struct div_z<ZDec<V>, sneg<V>> { using type = ZInc<V>; };

template<typename L, typename = void> struct sqr_z {};
template<class V> struct sqr_z<spos<V>> { using type = spos<V>; };
template<class V> struct sqr_z<sneg<V>> { using type = spos<V>; };
template<class V> struct sqr_z<ZPInc<V>> { using type = ZPInc<V>; };
template<class V> struct sqr_z<ZNInc<V>> { using type = ZPDec<V>; };
template<class V> struct sqr_z<ZPDec<V>> { using type = ZPDec<V>; };
template<class V> struct sqr_z<ZNDec<V>> { using type = ZPInc<V>; };
template<class V> struct sqr_z<V, std::enable_if_t<std::is_arithmetic_v<V>>> { using type = V; };

template<typename L, typename K> struct pow_z {};
template<class V> struct pow_z<spos<V>, spos<V>> { using type = spos<V>; };
template<class V> struct pow_z<spos<V>, sneg<V>> { using type = V; };
template<class V> struct pow_z<spos<V>, ZPInc<V>> { using type = ZPInc<V>; };
template<class V> struct pow_z<spos<V>, ZNInc<V>> { using type = ZPInc<V>; };
template<class V> struct pow_z<spos<V>, ZPDec<V>> { using type = ZPDec<V>; };
template<class V> struct pow_z<spos<V>, ZNDec<V>> { using type = ZPDec<V>; };
template<class V> struct pow_z<sneg<V>, spos<V>> { using type = V; };
template<class V> struct pow_z<sneg<V>, sneg<V>> { using type = V; };
template<class V> struct pow_z<ZPInc<V>, spos<V>> { using type = ZPInc<V>; };
template<class V> struct pow_z<ZPInc<V>, sneg<V>> { using type = ZPDec<V>; };
template<class V> struct pow_z<ZPInc<V>, ZPInc<V>> { using type = ZPInc<V>; };
template<class V> struct pow_z<ZPInc<V>, ZNDec<V>> { using type = ZPDec<V>; };
template<class V> struct pow_z<ZPDec<V>, spos<V>> { using type = ZPDec<V>; };
template<class V> struct pow_z<ZPDec<V>, sneg<V>> { using type = ZPInc<V>; };
template<class V> struct pow_z<ZPDec<V>, ZNInc<V>> { using type = ZPInc<V>; };
template<class V> struct pow_z<ZPDec<V>, ZPDec<V>> { using type = ZPDec<V>; };
template<class V> struct pow_z<spos<V>, V> { using type = V; };
template<class V> struct pow_z<sneg<V>, V> { using type = V; };
template<class V> struct pow_z<V, spos<V>> { using type = V; };
template<class V> struct pow_z<V, sneg<V>> { using type = V; };
template<class V> struct pow_z<V, V> { using type = V; };
template<class V> struct pow_z<spos<V>, ZInc<V>> { using type = ZPInc<V>; };
template<class V> struct pow_z<spos<V>, ZDec<V>> { using type = ZPDec<V>; };

template<class L, class K> struct join_t {};
template<class L> struct join_t<typename L::ValueType, L> { using type = L; };
template<class L> struct join_t<L, typename L::ValueType> { using type = L; };
template<class L> struct join_t<L, L> { using type = L; };

template<class L, class K> struct meet_t {};
template<class L> struct meet_t<typename L::ValueType, L> { using type = L; };
template<class L> struct meet_t<L, typename L::ValueType> { using type = L; };
template<class L> struct meet_t<L, L> { using type = L; };

template<class O, class L, class K> struct leq_t {};
template<class L> struct leq_t<L, typename L::ValueType, L> { using type = BInc; };
template<class L> struct leq_t<L, L, typename L::ValueType> { using type = BDec; };
template<class L> struct leq_t<L, L, typename L::dual_type> { using type = BDec; };
template<class L> struct leq_t<L, typename L::dual_type, L> { using type = BInc; };

template<class O, class L, class K> struct lt_t {};
template<class L> struct lt_t<L, typename L::ValueType, L> { using type = BInc; };
template<class L> struct lt_t<L, L, typename L::ValueType> { using type = BDec; };
template<class L> struct lt_t<L, L, typename L::dual_type> { using type = BDec; };
template<class L> struct lt_t<L, typename L::dual_type, L> { using type = BInc; };

template<class O, class L, class K> struct geq_t {};
template<class L> struct geq_t<L, typename L::ValueType, L> { using type = BDec; };
template<class L> struct geq_t<L, L, typename L::ValueType> { using type = BInc; };
template<class L> struct geq_t<L, L, typename L::dual_type> { using type = BInc; };
template<class L> struct geq_t<L, typename L::dual_type, L> { using type = BDec; };

template<class O, class L, class K> struct gt_t {};
template<class L> struct gt_t<L, typename L::ValueType, L> { using type = BDec; };
template<class L> struct gt_t<L, L, typename L::ValueType> { using type = BInc; };
template<class L> struct gt_t<L, L, typename L::dual_type> { using type = BInc; };
template<class L> struct gt_t<L, typename L::dual_type, L> { using type = BDec; };

template<class L> struct not_t {};
template<> struct not_t<bool> { using type = bool; };
template<> struct not_t<BInc> { using type = BDec; };
template<> struct not_t<BDec> { using type = BInc; };

template<class L, class K> struct and_t {};
template<> struct and_t<bool, bool> { using type = bool; };
template<> struct and_t<bool, BInc> { using type = BInc; };
template<> struct and_t<bool, BDec> { using type = BDec; };
template<> struct and_t<BInc, bool> { using type = BInc; };
template<> struct and_t<BInc, BInc> { using type = BInc; };
template<> struct and_t<BDec, bool> { using type = BDec; };
template<> struct and_t<BDec, BDec> { using type = BDec; };

template<class L, class K> struct or_t {};
template<> struct or_t<bool, bool> { using type = bool; };
template<> struct or_t<bool, BInc> { using type = BInc; };
template<> struct or_t<bool, BDec> { using type = BDec; };
template<> struct or_t<BInc, bool> { using type = BInc; };
template<> struct or_t<BInc, BInc> { using type = BInc; };
template<> struct or_t<BDec, bool> { using type = BDec; };
template<> struct or_t<BDec, BDec> { using type = BDec; };

template<class L, class K> struct equiv_t {};
template<> struct equiv_t<bool, bool> { using type = bool; };

template<class L, class K> struct imply_t {};
template<> struct imply_t<bool, bool> { using type = bool; };
template<> struct imply_t<bool, BInc> { using type = BInc; };
template<> struct imply_t<bool, BDec> { using type = BDec; };
template<> struct imply_t<BInc, bool> { using type = BInc; };
template<> struct imply_t<BInc, BDec> { using type = BDec; };
template<> struct imply_t<BDec, bool> { using type = BDec; };
template<> struct imply_t<BDec, BInc> { using type = BInc; };

template<class L, class K> struct xor_t {};
template<> struct xor_t<bool, bool> { using type = bool; };
